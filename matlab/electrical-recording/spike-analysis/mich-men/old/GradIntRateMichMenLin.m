function g = GradIntRateMichMenLin(trange,p,pindx)allowed = [1 2 3 4 6];if (~isempty(setdiff(pindx,allowed)))	error('Don''t know how to compute the gradient for all requested components');endgtemp = zeros(7,1);Kp = p(3)*p(7);km = p(4);sumk = Kp+km;kratio = Kp/sumk;T = p(5);c = p(7);rprop = p(2);ekst = exp(-sumk*T);trange = trange-p(6);tm = IntersectIntervals(trange,[0 T]);	% Middle intervaltr = IntersectIntervals(trange,[T trange(2)]);	% Right intervalif (~isempty(tm))	im = tm(2)-tm(1)+(exp(-sumk*tm(2))-exp(-sumk*tm(1)))/sumk;	imt = (tm(1)*exp(-sumk*tm(1))-tm(2)*exp(-sumk*tm(2)))/sumk + (exp(-sumk*tm(1))-exp(-sumk*tm(2)))/sumk^2;else	im = 0;	imt = 0;endif (~isempty(tr))	trT = tr-T;	ir = (exp(-km*(trT(1))-exp(-km*(trT(2)))))/km;	irt = (trT(1)*exp(-km*trT(1))-trT(2)*exp(-km*trT(2)))/km + (exp(-km*trT(1))-exp(-km*trT(2)))/km^2;;else	ir = 0;	irt = 0;end% Spont rategtemp(1) = trange(2)-trange(1);% Proportional rategtemp(2) = kratio*im;gtemp(2) = gtemp(2) + kratio*(1-exp(-sumk*T))*ir;% On rate prefactorgtemp(3) = rprop*c*(1-kratio)/sumk*im + rprop*kratio*c*imt;gtemp(3) = gtemp(3) + rprop*( (1-kratio)*c/sumk*(1-ekst) + kratio*c*T*ekst ) * ir;% Off rategtemp(4) = rprop*kratio*(-im/sumk + imt);gtemp(4) = gtemp(4) + rprop*kratio*( (T*ekst - (1-ekst)/sumk)*ir - (1-ekst)*irt );% Time delayif (~isempty(tm))	if (tm(1) == trange(1))		gtemp(6) = gtemp(6) + rprop*kratio*(1-exp(-sumk*tm(1)));	end	if (tm(2) == trange(2))		gtemp(6) = gtemp(6) - rprop*kratio*(1-exp(-sumk*tm(2)));	endendif (~isempty(tr))	rtAtOff = rprop*kratio*(1-exp(-sumk*T));	if (tr(1) == trange(1))		gtemp(6) = gtemp(6) + rtAtOff*exp(-km*(trT(1)));	end	if (tr(2) == trange(2))		gtemp(6) = gtemp(6) - rtAtOff*exp(-km*(trT(2)));	endendg = gtemp(pindx);
