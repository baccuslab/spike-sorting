static char mc_version[] = "MATLAB Compiler 1.2 Jan  7 1998 infun";/* *  MATLAB Compiler: 1.2 *  Date: Jan  7 1998 *  Arguments: -p RecordingWorkTryNostruct  */#ifndef ARRAY_ACCESS_INLINING#error You must use the -inline option when compiling MATLAB compiler generated code with MEX or MBUILD#endif#include <iostream.h>#include "matlab.hpp"#include "libhg.hpp"extern mwArray flipdim(mwArray, mwArray);static mwArray RecordingWorkTryNostruct_fillmm2(mwArray,mwArray,mwArray);extern mwArray gcbf(void);/***************** Compiler Assumptions **************** * *       RecordingWorkTryNostruct/fillmm2	<function being defined> *       fill        	<function> *       flipdim     	<function> *       h           	complex vector/matrix *       vmax        	complex vector/matrix *       vmin        	complex vector/matrix *       x           	complex vector/matrix *       xx          	complex vector/matrix *       yy          	complex vector/matrix *******************************************************/mwArray RecordingWorkTryNostruct_fillmm2(mwArray vmin,mwArray vmax,mwArray x){   mwArray TempMatrix_[32];   mwArray yy;   mwArray xx;      mwArray h = ((mxArray *) NULL);   yy = horzcat(vmin,flipdim(vmax,2));   xx = horzcat(x,flipdim(x,2));   h = fill(xx,yy,"b","EdgeColor","b");   return(h);}/***************** Compiler Assumptions **************** * *       RecordingWorkTryNostruct	<function being defined> *       RecordingWorkTryNostruct/fillmm2	<function> *       axH         	complex vector/matrix *       axes        	<function> *       buffersize  	complex vector/matrix *       channels    	complex vector/matrix *       counter     	integer scalar *       delete_func 	<function> *       drawnow     	<function> *       filename    	complex vector/matrix *       findobj     	<function> *       gIsRecording	global complex vector/matrix *       gcbf        	<function> *       get_global  	<function> *       i           	integer scalar *       minmax      	complex vector/matrix *       npix        	real scalar *       nscans      	complex vector/matrix *       patchH      	complex vector/matrix *       rand        	<function> *       scanrate    	complex vector/matrix *       set         	<function> *       set_global  	<function> *       sprintf     	<function> *       textH       	complex vector/matrix *       xcoord      	complex vector/matrix *       zeros       	<function> *******************************************************/void RecordingWorkTryNostruct(mwArray channels,mwArray scanrate,mwArray nscans,mwArray buffersize,double npix,mwArray axH,mwArray textH,mwArray filename){   mwArray TempMatrix_[32];   int counter = 0;   mwArray xcoord;   mwArray patchH;   int i = 0;   mwArray minmax;      // RecordingWorkTry(recparams,npix,axH,textH)   // A trial file to test real-time plotting routines.   // Plots random numbers   counter = 0;   xcoord = ramp(1,npix);   patchH = zeros(1,64);   for (int _index1_i=1; _index1_i<=64; ++_index1_i )   {      i=_index1_i;      patchH(i) = RecordingWorkTryNostruct_fillmm2(zeros(1,npix),zeros(1,npix),xcoord);   }   while ( tobool(get_global("gIsRecording")) && tobool(counter<nscans) )   {      delete_func(patchH);      patchH = zeros(1,64);      minmax = rand_func(64,2*((double) npix ));      minmax(colon(),xcoord) = -minmax(colon(),xcoord);      for (int _index2_i=1; _index2_i<=64; ++_index2_i )      {         i=_index2_i;         axes(axH(i));         patchH(i) = RecordingWorkTryNostruct_fillmm2(minmax(i,xcoord),minmax(i,xcoord+npix),xcoord);      }      set(textH,"String",sprintf(mwArray("%d seconds remaining"),nscans-mwArray(counter)));      counter = counter+1;      // %if (mod(counter,100) == 0)      drawnow();      // %end   }   set(textH,"String","All done!");   set_global("gIsRecording",0);   set(findobj(gcbf(),"Tag","StopRecButton"),"Enable","off");   return;}