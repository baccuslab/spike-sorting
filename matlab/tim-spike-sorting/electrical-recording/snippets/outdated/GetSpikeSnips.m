function [snips,chan,I] = GetSpikeSnips(filename,chIndex,thresh,polarity,sniprange,n)% [snips,chan,I] = GetSpikeSnips(filename,chIndex,thresh,polarity,sniprange,n)% Load a collection of spike snippets from a file% chIndex is the vector of good channels% thresh is the vector of thresholds for those channels% polarity is a scalar, +1 or -1% Will load data until at least n snippets have been collected, or% until end of filet = 0;twidth = 1;	% collect data in 1s chunks%chIndex = chIndex + 1;	% To account for the 1-64 numbering[d,h] = loadmc(filename,[0,0.01]);	% Just to read the headerwidth = sniprange(2)-sniprange(1)+1;snips = zeros(width,0);I = zeros(0,0);chan = zeros(0,0);indx = 1;while (size(snips,2) < n & t+twidth < h.nscans/h.scanrate)	d = loadmc(filename,[t,t+twidth]);	for i = 1:length(chIndex)		Itemp = chooseSpikeTimes(polarity*d(chIndex(i),:),thresh(i),sniprange);		sniptemp = snip(d(chIndex(i),:),Itemp,sniprange);		snips(:,indx:indx+length(Itemp)-1) = sniptemp;		I(indx:indx+length(Itemp)-1) = Itemp+round(t*h.scanrate);		chan(indx:indx+length(Itemp)-1) = chIndex(i)*ones(1,length(Itemp));		indx = indx+length(Itemp);	end	t = t+twidth;end%chan = chan - 1;fprintf('Read a total of %d seconds of data for %d spikes\n',t,size(snips,2));